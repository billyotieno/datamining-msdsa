help()
help()
install.packages("stream")
install.packages("animation") # for animating data streams
install.packages("mlpack") # for hoeffding-tree algorithm
# Load the libraries
library("stream")
# Load the libraries
library("stream")
library("mlpack")
any(grepl("stream", installed.packages())) # Check if installed (TRUE)
# Load the libraries
library("stream")
library("mlpack")
### 2. Usage and documentation
In order to find out about the **stream** R library, we can use the *help* command.
```{r eval=FALSE}
??stream # Use help to check out the documentation
stream1 <- DSD_Benchmark(1)
animate_data(stream1, horizon=100, n=5000, xlim=c(0,1), ylim=c(0,1))
# Cassini dataset
stream2 <- DSD_mlbenchGenerator("cassini")
animate_data(stream2)
# Cassini dataset
stream2 <- DSD_mlbenchGenerator("cassini")
animate_data(stream2)
set.seed(2000)
stream3 <- DSD_Gaussians(k = 3, noise = 0.1)
plot(stream3)
dstream <- DSC_DStream(gridsize = 0.1)
update(dstream, stream3, 1000)
plot(dstream, stream3, grid = TRUE)
stream4 <- DSD_Gaussians(k=3, d=5, outliers=1, space_limit=c(0,2), outlier_options = list(outlier_horizon=10))
stream4 <- DSD_Gaussians(k=3, d=5, outliers=1, space_limit=c(0,2), outlier_options = list(outlier_horizon=10))
write_stream(stream4, "data.txt", n=10, header = TRUE, sep=",", class=TRUE, write_outliers=TRUE)
stream5 <- DSD_ReadCSV(k=3, o=1, "data.txt", sep=",", header = TRUE, loop=TRUE, class="class", outlier="outlier")
animate_data(stream2)
# Documentation
??hoeffding_tree
# Documentation
??hoeffding_tree
# Classification
output <- mlpack::hoeffding_tree(training=stream2, confidence=0.99)
tree <- output$output_model
# Classification
output <- mlpack::hoeffding_tree(training=stream2, confidence=0.99)
pwed
pwd()
pwd
wd
cwd
dir()
setwd("/Users/botieno/Desktop/Data Science & Analytics/masters_projects/r_class_files")
ls
ls
ls()
ls()
a <- TRUE
print(a)
nchar(s)
s <- "Hello"
nchar(s)
?paste
paste(name1, ",", name2, ",", name3)
name1 <- "Billy"
name2 <- "Otieno"
name3 <- "Opiyo"
paste(name1, ",", name2, ",", name3)
# cat() is another function that is also used for concatenation
cat(name1, ",", name2, ",", name3)
# cat() is another function that is also used for concatenation
combined_names <- cat(name1, ",", name2, ",", name3)
class(combined_names)
type(combined_names)
# cat() is another function that is also used for concatenation
combined_names <- cat(name1, ",", name2, ",", name3)
type(combined_names)
class(combined_names)
?cat
grepl("did", sentence_string)
sentence_string = "I travelled to Kisumu but I did not find what I was looking for"
grepl("did", sentence_string)
my_name <- "Billy Otieno Opiyo"
substring(my_name, 2, 4)
substring(my_name, 0, 4)
substring(my_name, 1, 4)
# Logical operators in R Programming
x <- 6
x == 6
x > 5
x < 5
x > 1 && x < 5
x < 2 || x > 5
~x
!x
setwd("~/Desktop/Data Science & Analytics/masters_projects/r_class_files")
array_a <- array(data = c(1, 2, 3, 4, 3, 3, 23, 2, 1))
class(array_a)
attributes(array_a)
length(array_a)
range(length(array_a))
range(0, 10)
max(array_a)
min(array_a)
get_odds
get_odds <- function(array=NA){
for (item in array) {
if (item %% 2 == 0){
print("This number is even: ", item)
}
}
}
get_odds
get_odds(array_a)
get_odds <- function(array=NA){
for (item in array) {
if (item %% 2 == 0){
print(paste("This number is an even number: ", item))
}
}
}
get_odds(array_a)
get_even <- function(array=NA){
# Function prints even numbers from an array_list
for (item in array) {
if (item %% 2 == 0){
print(paste("This number is an even number: ", item))
}
}
}
get_odds(array_a)
get_even(array_a)
account = 200000
# Conditional Checks / Conditional Statements
if (account < 10000){
print("Billy you are broke as f**ck!!! Man up - Check your spending")
}else if (account >= 10000){
print("Billy you have some money but your are not far from being broke!!")
}else{
print("Man you got money!! Good financial managment")
}
account = 200000
# Conditional Checks / Conditional Statements
if (account < 10000){
print("Billy you are broke as f**ck!!! Man up - Check your spending")
}else if (account >= 10000 && account <= 50000){
print("Billy you have some money but your are not far from being broke!!")
}else{
print("Man you got money!! Good financial managment")
}
print(count)
count = 5
for (count in range(count)) {
print(count)
}
for (count in c(:count)) {
print(count)
}
count = 5
for (count in c(:count)) {
print(count)
}
word * 5
count = 5
word * 5
# Problem: print "hello" 5 times
word <- "Hello"
count = 5
word * 5
word * 5
word
word ** 5
count = 5
while(count > 0){
print(count)
count <- count - 1
}
count = 5
# Print from 5 to 1
while(count >= 0){
print(count)
count <- count - 1
}
do{
print(count)
count <- count - 1
} while(count > 0)
repeat{
print(count)
count <- count - 1
if(count < 0){break}
}
count = 5
repeat{
print(count)
count <- count - 1
if(count < 0){break}
}
# For Loop in R
?range
print(items)
print("items")
print("items")
# For Loop in R
for(items in 1:20){
print("items")
}
# For Loop in R
for(items in 1:20){
print("items")
}
1:20
x = 1:20
x
x
1:20
x = 1:20
myFunction <- function(a){
print(a)
}
myFunction("Billy Otieno")
# Function returning a list of even numbers from a list of 100 numbers
input_list <- list(c(1:100))
input_list
?list
func.even <- function(number_list = NA){
even_number_list <- list()
for (number in number_list){
if (number %% 2 == 0){
append(even_number_list, number)
}
}
}
func.even <- function(number_list = NA){
even_number_list <- list()
for (number in number_list){
if (number %% 2 == 0){
append(even_number_list, number)
}
}
return (even_number_list)
}
func.even(input_list)
func.even <- function(number_list = NA){
even_number_list <- list()
for (number in number_list){
if (number %% 2 == 0){
append(even_number_list, number)
}
}
return (even_number_list)
}
func.even(input_list)
# Function returning a list of even numbers from a list of 100 numbers
input_list <- list(c(1:100))
input_list
func.even <- function(number_list = NA){
even_number_list <- list()
for (number in number_list){
if (number %% 2 == 0){
append(even_number_list, number)
}
}
return (even_number_list)
}
func.even(input_list)
func.even(input_list)
for (number in number_list){
print(number)
}
func.even <- function(number_list = NA){
even_number_list <- list()
for (number in number_list){
print(number)
}
}
func.even(input_list)
print(number / 2)
for (number in number_list){
print(number / 2)
}
func.even <- function(number_list = NA){
even_number_list <- list()
for (number in number_list){
print(number / 2)
}
}
func.even(input_list)
func.even <- function(number_list = NA){
even_number_list <- list()
for (number in number_list){
class(number)
}
}
func.even(input_list)
print(class(number))
for (number in number_list){
print(class(number))
}
func.even <- function(number_list = NA){
even_number_list <- list()
for (number in number_list){
print(class(number))
}
}
func.even(input_list)
func.even <- function(input_list = NA){
even_number_list <- list()
for (number in number_list){
print(class(number))
}
}
func.even(input_list)
for (number in input_list){
print(class(number))
}
func.even <- function(input_list = NA){
even_number_list <- list()
for (number in input_list){
print(class(number))
}
}
func.even(input_list)
func.even <- function(input_list = NA){
even_number_list <- list()
for (number in input_list){
print(number)
}
}
func.even(input_list)
# Function returning a list of even numbers from a list of 100 numbers
input_list <- c(1:100)
input_list
func.even <- function(input_list = NA){
even_number_list <- list()
for (number in input_list){
print(number)
}
}
func.even(input_list)
func.even <- function(input_list = NA){
even_number_list <- c()
for (number in input_list){
if(number %% 2 == 0){
append(even_number_list, number)
}
}
}
func.even(input_list)
func.even <- function(input_list = NA){
even_number_list <- c()
for (number in input_list){
if(number %% 2 == 0){
append(even_number_list, number)
}
}
return (even_number_list)
}
func.even(input_list)
even_number_list <- list()
for (number in input_list){
if(number %% 2 == 0){
append(even_number_list, number)
}
}
return (even_number_list)
func.even <- function(input_list = NA){
even_number_list <- list()
for (number in input_list){
if(number %% 2 == 0){
append(even_number_list, number)
}
}
return (even_number_list)
}
func.even(input_list)
print(func.even(input_list))
func.even <- function(input_list = NA){
even_number_list <- list()
for (number in input_list){
if(number %% 2 == 0){
append(even_number_list, number)
}
}
return (even_number_list)
}
print(func.even(input_list))
func.even <- function(input_list = NA){
even_number_list <- list()
for (number in input_list){
if(number %% 2 == 0){
append(even_number_list, number)
}
}
return (even_number_list)
}
print(func.even(input_list))
input_list
func.even <- function(input_list = NA){
even_number_list <- list()
for (number in input_list){
if(number %% 2 == 0){
append(even_number_list, number)
}
}
return (even_number_list)
}
print(func.even(input_list))
even_number_list
func.even <- function(input_list = NA){
even_number_list <- list()
for (number in input_list){
if(number %% 2 == 0){
append(even_number_list, number)
}
}
return (even_number_list)
}
print(func.even(input_list))
for (number in lists){
if(number %% 2 == 0){
append(even_number_list, number)
}
}
return (even_number_list)
func.even <- function(lists = NA){
even_number_list <- list()
for (number in lists){
if(number %% 2 == 0){
append(even_number_list, number)
}
}
return (even_number_list)
}
func.even()
func.even(input_list)
func.even <- function(lists = NA){
even_number_list <- list()
for (number in lists){
if(number %% 2 == 0){
append(even_number_list, number)
}
}
return (even_number_list)
}
func.even(input_list)
func.even <- function(lists = NA){
even_number_list <- c()
for (number in lists){
if(number %% 2 == 0){
append(even_number_list, number)
}
}
return (even_number_list)
}
func.even(input_list)
